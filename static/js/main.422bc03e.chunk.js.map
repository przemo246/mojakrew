{"version":3,"sources":["assets/img/logo1x.png","components/atoms/Notification.tsx","components/atoms/Label.tsx","components/atoms/ButtonRed.tsx","components/UserData/UserData.tsx","hooks/useNotification.tsx","ts/bloodElements.ts","components/UserResults/UserResults.tsx","components/UserAnalysis/BloodElement.tsx","components/UserAnalysis/UserAnalysis.tsx","components/Modal/TestPDF.tsx","components/Modal/Modal.tsx","App.tsx","hooks/useModal.tsx","index.tsx"],"names":["Alert","forwardRef","props","ref","elevation","variant","Notification","type","message","isNotificationOpen","toggleIsNotificationOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","fontSize","fontFamily","display","alignItems","justifyContent","Label","htmlFor","children","className","ButtonRed","onClick","disabled","UserData","setTests","setCurrentTest","currentTest","useState","location","setLocation","date","setDate","notification","setNotification","setIsNotificationOpen","useNotification","useEffect","onSubmit","e","preventDefault","currentTestObj","id","Number","Date","now","toString","slice","elements","prevState","value","onChange","target","name","placeholder","bloodElements","leukocyty","description","unit","erytrocyty","hemoglobina","hematokryt","mcv","mch","mchc","rdw","plytkikrwi","mpv","neutrocyty","limfocyty","monocyty","eozynocyty","bazocyty","ig","UserResults","referenceFrom","referenceTo","result","results","setResults","handleInputChange","prev","step","min","findIndex","el","bloodElementObj","map","obj","filterElements","elementsFiltered","filter","BloodElement","element","currentTestID","removedElementID","currentTarget","handleRemoveBloodElement","UserAnalysis","styles","StyleSheet","create","image","marginVertical","marginHorizontal","page","paddingTop","paddingBottom","paddingHorizontal","textAlign","section","margin","padding","flexGrow","text","marginBottom","Font","register","family","src","TestPDF","size","style","logo","toLocaleDateString","color","Modal","tests","testOptionsWindow","setTestOptionsWindow","testOptions","test","isOptionsOpen","findTestOptionsObj","find","findIsOptionsOpen","toggleIsOptionsOpen","modalRoot","document","getElementById","reactDom","createPortal","length","i","title","handleSetCurrentTest","marginRight","fileName","blob","url","loading","error","App","isOpen","setIsOpen","useModal","toggleIsOpen","storedTests","localStorage","getItem","JSON","parse","setItem","stringify","clear","alt","href","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.422bc03e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo1x.5d80f5b2.png\";","import { forwardRef, SyntheticEvent } from \"react\";\r\nimport { FunctionComponent } from \"react\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@mui/material/Alert\";\r\nimport { AlertColor } from \"@mui/material/Alert\";\r\n\r\ninterface NotificationProps {\r\n  type: AlertColor;\r\n  message: string;\r\n  isNotificationOpen: boolean;\r\n  toggleIsNotificationOpen: () => void;\r\n}\r\n\r\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const Notification: FunctionComponent<NotificationProps> = ({\r\n  type,\r\n  message,\r\n  isNotificationOpen,\r\n  toggleIsNotificationOpen,\r\n}) => {\r\n  if (!isNotificationOpen) return null;\r\n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    toggleIsNotificationOpen();\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={isNotificationOpen}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert\r\n        onClose={handleClose}\r\n        severity={type}\r\n        sx={{\r\n          width: \"100%\",\r\n          fontSize: \"1.4rem\",\r\n          fontFamily: \"inherit\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n","import { FunctionComponent } from \"react\";\r\n\r\ninterface LabelProps {\r\n  htmlFor: string;\r\n}\r\n\r\nexport const Label: FunctionComponent<LabelProps> = ({ htmlFor, children }) => {\r\n  return (\r\n    <label htmlFor={htmlFor} className=\"red-label\">\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n","import { FunctionComponent } from \"react\";\r\n\r\ninterface ButtonRedProps {\r\n  type: \"submit\" | \"reset\" | \"button\" | undefined;\r\n  onClick?: () => void;\r\n  disabled: boolean;\r\n}\r\n\r\nexport const ButtonRed: FunctionComponent<ButtonRedProps> = ({\r\n  type,\r\n  onClick,\r\n  disabled,\r\n  children,\r\n}) => {\r\n  if (disabled) {\r\n    return (\r\n      <button type={type} className=\"btn btn-red\" onClick={onClick} disabled>\r\n        {children}\r\n      </button>\r\n    );\r\n  } else {\r\n    return (\r\n      <button type={type} className=\"btn btn-red\" onClick={onClick}>\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { Test } from \"../../../types/interfaces\";\r\nimport { useNotification } from \"../../hooks/useNotification\";\r\nimport { Notification } from \"../atoms/Notification\";\r\nimport { Label } from \"../atoms/Label\";\r\nimport { ButtonRed } from \"../atoms/ButtonRed\";\r\nimport { AlertColor } from \"@mui/material/Alert\";\r\n\r\ninterface UserDataProps {\r\n  setTests: React.Dispatch<React.SetStateAction<Test[]>>;\r\n  setCurrentTest: React.Dispatch<React.SetStateAction<Test | null>>;\r\n  currentTest: Test | null;\r\n}\r\n\r\nexport const UserData: FunctionComponent<UserDataProps> = ({\r\n  setTests,\r\n  setCurrentTest,\r\n  currentTest,\r\n}) => {\r\n  const [location, setLocation] = useState<string>(\"\");\r\n  const [date, setDate] = useState<string | number>(\"\");\r\n  const [notification, setNotification] = useState<{\r\n    type: AlertColor;\r\n    message: string;\r\n  }>({ type: \"info\", message: \"\" });\r\n  const [isNotificationOpen, toggleIsNotificationOpen] = useNotification();\r\n  useEffect(() => {\r\n    if (currentTest) {\r\n      setLocation(currentTest.location);\r\n      setDate(currentTest.date);\r\n    } else {\r\n      setLocation(\"\");\r\n      setDate(\"\");\r\n    }\r\n  }, [currentTest]);\r\n  const handleSubmitForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (date && location) {\r\n      const id = Number(Date.now().toString().slice(-5));\r\n      const currentTestObj = { id, date, location, elements: [] };\r\n      setCurrentTest(currentTestObj);\r\n      setTests((prevState) => [...prevState, currentTestObj]);\r\n      setNotification({ type: \"success\", message: \"Dodano nowe badanie\" });\r\n      toggleIsNotificationOpen();\r\n    }\r\n  };\r\n\r\n  const handleAddNewTest = () => {\r\n    setLocation(\"\");\r\n    setDate(\"\");\r\n    setCurrentTest(null);\r\n  };\r\n\r\n  return (\r\n    <section className=\"user-data\">\r\n      <span className=\"order-number\">1</span>\r\n      <h1 className=\"heading-primary\">Uzupełnij informacje o badaniu</h1>\r\n      <form onSubmit={handleSubmitForm} className=\"user-data__form\">\r\n        <Label htmlFor=\"date\">data</Label>\r\n        <input\r\n          type=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          name=\"date\"\r\n          id=\"date\"\r\n        />\r\n        <Label htmlFor=\"location\">miejsce</Label>\r\n        <div className=\"user-data__location\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"location\"\r\n            id=\"location\"\r\n            placeholder=\"np. Bruss, Aleja Grunwaldzka 60, Gdańsk\"\r\n            onChange={(e) => setLocation(e.target.value)}\r\n            value={location}\r\n          />\r\n        </div>\r\n        <ButtonRed type=\"submit\" disabled={location && date ? false : true}>\r\n          OK\r\n        </ButtonRed>\r\n        <ButtonRed type=\"button\" onClick={handleAddNewTest} disabled={false}>\r\n          DODAJ NOWE\r\n        </ButtonRed>\r\n      </form>\r\n      <Notification\r\n        type={notification.type}\r\n        message={notification.message}\r\n        isNotificationOpen={isNotificationOpen}\r\n        toggleIsNotificationOpen={toggleIsNotificationOpen}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useNotification = (): [boolean, () => void] => {\r\n  const [isNotificationOpen, setIsNotificationOpen] = useState(false);\r\n  const toggleIsNotificationOpen = () =>\r\n    setIsNotificationOpen(!isNotificationOpen);\r\n  return [isNotificationOpen, toggleIsNotificationOpen];\r\n};\r\n","import { ElementData } from \"../../types/interfaces\";\r\n\r\nexport const bloodElements: ElementData = {\r\n  leukocyty: {\r\n    name: \"Leukocyty [C30]\",\r\n    description:\r\n      \"Elementy morfotyczne krwi. Są niemal bezbarwne i mniej liczne od erytrocytów, posiadają zdolność ruchu. Żyją od kilku dni (granulocyty) nawet do 20 lat (limfocyty B pamięci immunologicznej). Ich zadaniem jest ochrona organizmu przed patogenami, takimi jak wirusy i bakterie. Wszystkie leukocyty wykazują ekspresję cząsteczki CD45.\",\r\n    unit: \"G/l\",\r\n  },\r\n  erytrocyty: {\r\n    name: \"Erytrocyty [C02]\",\r\n    description:\r\n      \"Krwinka czerwona, czerwone ciałko krwi – morfotyczny składnik krwi, którego głównym zadaniem jest przenoszenie tlenu z płuc do pozostałych tkanek organizmu.\",\r\n    unit: \"T/l\",\r\n  },\r\n  hemoglobina: {\r\n    name: \"Hemoglobina\",\r\n    description:\r\n      \"Czerwony barwnik krwi, białko zawarte w erytrocytach, którego zasadniczą funkcją jest transportowanie tlenu – przyłączanie go w płucach i uwalnianie w tkankach. Mutacje genu hemoglobiny prowadzą do chorób dziedzicznych: anemii sierpowatej, talasemii lub rzadkich chorób zwanych hemoglobinopatiami.\",\r\n    unit: \"g/dl\",\r\n  },\r\n  hematokryt: {\r\n    name: \"Hematokryt\",\r\n    description: \"Stosunek objętości erytrocytów do objętości pełnej krwi.\",\r\n    unit: \"%\",\r\n  },\r\n  mcv: {\r\n    name: \"MCV\",\r\n    description:\r\n      \"(z ang. Mean Corpuscular Volume) - Średnia objętość krwinki czerwonej. Znajdująca się w nich hemoglobina odpowiedzialna jest za transport tlenu do komórek, natomiast odpowiednia ilość tlenu potrzebna jest do poprawnego funkcjonowania naszego organizmu. Zatem parametr MCV wyraża ilość zawartego w organizmie badanego hematokrytu oraz ilość krwinek czerwonych.\",\r\n    unit: \"fl\",\r\n  },\r\n  mch: {\r\n    name: \"MCH\",\r\n    description:\r\n      \"(z ang. Mean Corpuscular Hemoglobin) to średnia waga hemoglobiny w czerwonej krwince. Średnia ta otrzymywana jest z podzielenia stężenia hemoglobiny przez liczbę erytrocytów.\",\r\n    unit: \"pg\",\r\n  },\r\n  mchc: {\r\n    name: \"MCHC\",\r\n    description:\r\n      \"Jest jednym z parametrów oznaczanych podczas morfologii krwi. Jest to wskaźnik określający średnie stężenie hemoglobiny w erytrocytach, czyli czerwonych krwinkach. Poziom MCHC mówi wiele o zdrowiu człowieka. Podwyższone poziom tego wskaźnika może świadczyć o odwodnieniu, a obniżony o anemii.\",\r\n    unit: \"g/dl\",\r\n  },\r\n  rdw: {\r\n    name: \"RDW\",\r\n    description:\r\n      \"To wskaźnik rozkładu objętości erytrocytów (czerwonych krwinek). Wskaźnik ten ocenia różnice w wielkości poszczególnych krwinek czerwonych.\",\r\n    unit: \"%\",\r\n  },\r\n  plytkikrwi: {\r\n    name: \"Płytki krwi [C66]\",\r\n    description:\r\n      \"Trombocyty, inaczej płytki krwi bądź krwinki płytkowe, to obok białych i czerwonych krwinek elementy morfotyczne krwi. Płytki krwi odgrywają kluczową rolę w procesie krzepnięcia.\",\r\n    unit: \"G/l\",\r\n  },\r\n  mpv: {\r\n    name: \"MPV\",\r\n    description:\r\n      \"(z ang. Mean Platelet Volume) jest jednym z wielu współczynników morfologii krwi. Badanie to daje nam wiedzę o wielkości wytwarzanych przez szpik kostny trombocytów, czyli płytek krwi. Pozwala rozpoznać nadpłytkowość lub małopłytkowość.\",\r\n    unit: \"fl\",\r\n  },\r\n  neutrocyty: {\r\n    name: \"Neutrocyty\",\r\n    description:\r\n      \"Neutrocyty nazywane są inaczej neutrofilami. To obojętnochłonne granulocyty, które przypominaja niewielkie kulki o średnicy nieprzekraczającej 13 mikrometrów. Stanowią jedną z najważniejszych części naszego układu odpornościowego. Potrafią w ciągu ułamków sekund reagować na obecność szkodliwych substancji.\",\r\n    unit: \"G/l\",\r\n  },\r\n  limfocyty: {\r\n    name: \"Limfocyty\",\r\n    description:\r\n      \"Limfocyty należą do grupy krwinek białych.  Stanowią podstawę odpowiedzi odpornościowej swoistej.  Są odpowiedzialne za obronę organizmu przed drobnoustrojami: bakteriami, wirusami i grzybami oraz uczestniczą w zwalczaniu komórek nowotworowych. Mają zdolność tworzenia przeciwciał, a ich nadmiar lub obniżona liczba świadczą o nieprawidłowym stanie organizmu. Co to są limfocyty i jakie pełnią funkcje w organizmie człowieka?\",\r\n    unit: \"G/l\",\r\n  },\r\n  monocyty: {\r\n    name: \"Monocyty\",\r\n    description:\r\n      \"Monocyty we krwi to największe komórki krwi, zaliczane do agranulocytów. Ich głównym zadaniem jest regulowanie pracy układu immunologicznego. Produkowane są w szpiku kostnym z komórek macierzystych, po czym przedostają się do krwi i różnych narządów oraz układów naszego organizmu i w tkankach przeobrażają się w makrofagi.\",\r\n    unit: \"G/l\",\r\n  },\r\n  eozynocyty: {\r\n    name: \"Eozynocyty\",\r\n    description:\r\n      \"Eozynocyty (EO) to typ białych krwinek, które tworzą tzw. granulocyty kwasochłonne. Uczestniczą w odpowiedzi immunologicznej organizmu i chronią go przed zakażeniem pasożytami oraz występowaniem reakcji alergicznych. Są one aktywowane w przypadku wystąpienia niektórych chorób alergicznych oraz infekcji.\",\r\n    unit: \"G/l\",\r\n  },\r\n  bazocyty: {\r\n    name: \"Bazocyty\",\r\n    description:\r\n      \"Bazocyty (bazofile, granulocyty zasadochłonne, BASO) to jedne z podstawowych komórek krwi, które odgrywają rolę w obronie organizmu i powstawaniu zapalenia w wyniku alergii. Zostały odnalezione pod koniec XIX wieku przez Paula Ehrlicha, jednak przez dłuższy czas nie przeprowadzano nad nimi dokładniejszych badań.\",\r\n    unit: \"G/l\",\r\n  },\r\n  ig: {\r\n    name: \"IG\",\r\n    description:\r\n      \"(ang. Immature Granulocytes) - Obecność niedojrzałych granulocytów we krwi obwodowej wskazuje na odpowiedź na zakażenie, zapalenia lub inny czynnik stymulujący szpik kostny we wczesnym etapie u pacjentów w stanach ciężkich np. po rozległych urazach lub w podejrzeniu sepsy.\",\r\n    unit: \"G/l\",\r\n  },\r\n};\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Test, Element } from \"../../../types/interfaces\";\r\nimport { bloodElements } from \"../../ts/bloodElements\";\r\n\r\ninterface UserResultProps {\r\n  currentTest: Test | null;\r\n  setTests: React.Dispatch<React.SetStateAction<Test[]>>;\r\n  setCurrentTest: React.Dispatch<React.SetStateAction<Test | null>>;\r\n}\r\n\r\nexport const UserResults: FunctionComponent<UserResultProps> = ({\r\n  currentTest,\r\n  setTests,\r\n  setCurrentTest,\r\n}) => {\r\n  const [results, setResults] = useState<Element>({\r\n    id: \"\",\r\n    name: \"\",\r\n    referenceFrom: \"\",\r\n    referenceTo: \"\",\r\n    result: \"\",\r\n  });\r\n\r\n  const handleOptionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const id = e.target.value;\r\n    if (id) {\r\n      setResults((prev) => ({ ...prev, id, name: bloodElements[id].name }));\r\n    } else {\r\n      setResults((prev) => ({ ...prev, id }));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setResults((prev) => ({ ...prev, [e.target.id]: e.target.value }));\r\n  };\r\n\r\n  const handleSubmitForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const { id, name } = results;\r\n    const referenceFrom = Number(results.referenceFrom);\r\n    const referenceTo = Number(results.referenceTo);\r\n    const result = Number(results.result);\r\n    const index = currentTest?.elements.findIndex((el) => el.id === id);\r\n    if (\r\n      index === -1 &&\r\n      name &&\r\n      referenceFrom > 0 &&\r\n      referenceTo > 0 &&\r\n      referenceFrom < referenceTo &&\r\n      result > 0 &&\r\n      currentTest\r\n    ) {\r\n      const bloodElementObj: Element = {\r\n        id,\r\n        name,\r\n        referenceFrom,\r\n        referenceTo,\r\n        result,\r\n      };\r\n      setCurrentTest((prev: any) => ({\r\n        ...prev,\r\n        elements: [...prev.elements, bloodElementObj],\r\n      }));\r\n      setTests((prev: Test[]): Test[] => {\r\n        return prev.map((obj: Test) => {\r\n          if (obj.id === currentTest?.id) {\r\n            return { ...obj, elements: [...obj.elements, bloodElementObj] };\r\n          }\r\n          return obj;\r\n        });\r\n      });\r\n      setResults({\r\n        id: \"\",\r\n        name: \"\",\r\n        referenceFrom: \"\",\r\n        referenceTo: \"\",\r\n        result: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"user-results\">\r\n      <span className=\"order-number\">2</span>\r\n      <h1 className=\"heading-primary\">Wprowadź wyniki morfologii krwi</h1>\r\n      <form className=\"user-results__form\">\r\n        <label htmlFor=\"test\" className=\"red-label\">\r\n          badanie\r\n        </label>\r\n        <select\r\n          name=\"test\"\r\n          id=\"test\"\r\n          value={results.id}\r\n          onChange={handleOptionChange}\r\n        >\r\n          <option value=\"\">-</option>\r\n          <option value=\"leukocyty\">Leukocyty [C30]</option>\r\n          <option value=\"erytrocyty\">Erytrocyty [C02]</option>\r\n          <option value=\"hemoglobina\">Hemoglobina</option>\r\n          <option value=\"hematokryt\">Hematokryt</option>\r\n          <option value=\"mcv\">MCV</option>\r\n          <option value=\"mch\">MCH</option>\r\n          <option value=\"mchc\">MCHC</option>\r\n          <option value=\"rdw\">RDW</option>\r\n          <option value=\"plytkikrwi\">Płytki krwi [C66]</option>\r\n          <option value=\"mpv\">MPV</option>\r\n          <option value=\"neutrocyty\">Neutrocyty</option>\r\n          <option value=\"limfocyty\">Limfocyty</option>\r\n          <option value=\"monocyty\">Monocyty</option>\r\n          <option value=\"eozynocyty\">Eozynocyty</option>\r\n          <option value=\"bazocyty\">Bazocyty</option>\r\n          <option value=\"ig\">IG</option>\r\n        </select>\r\n        <label htmlFor=\"result\" className=\"red-label\">\r\n          wynik\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"result\"\r\n          id=\"result\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          value={results.result}\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n      <form className=\"user-results__form\" onSubmit={handleSubmitForm}>\r\n        <label htmlFor=\"referenceFrom\" className=\"red-label\">\r\n          wart. referencyjna od\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"referenceFrom\"\r\n          id=\"referenceFrom\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          value={results.referenceFrom}\r\n          onChange={handleInputChange}\r\n        />\r\n        <label htmlFor=\"referenceTo\" className=\"red-label\">\r\n          do\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"referenceTo\"\r\n          id=\"referenceTo\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          value={results.referenceTo}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button className=\"btn btn-red\" disabled={!currentTest ? true : false}>\r\n          Dodaj\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { bloodElements } from \"../../ts/bloodElements\";\r\nimport { Test, Element } from \"../../../types/interfaces\";\r\nimport { FaCheck, FaTrash, FaTimes, FaQuestionCircle } from \"react-icons/fa\";\r\n\r\ninterface BloodElementProps {\r\n  element: Element;\r\n  currentTestID: number;\r\n  setTests: React.Dispatch<React.SetStateAction<Test[]>>;\r\n  setCurrentTest: React.Dispatch<React.SetStateAction<Test | null>>;\r\n}\r\n\r\nconst filterElements = (obj: Test, id: string) => {\r\n  const elementsFiltered = obj.elements.filter((el) => el.id !== id);\r\n  return { ...obj, elements: elementsFiltered };\r\n};\r\n\r\nexport const BloodElement: FunctionComponent<BloodElementProps> = ({\r\n  element,\r\n  currentTestID,\r\n  setTests,\r\n  setCurrentTest,\r\n}) => {\r\n  const handleRemoveBloodElement = (\r\n    e: React.MouseEvent<SVGElement, globalThis.MouseEvent>\r\n  ) => {\r\n    const removedElementID = e.currentTarget.id;\r\n    setTests((prev) => {\r\n      return prev.map((el) => {\r\n        if (el.id === currentTestID) {\r\n          return filterElements(el, removedElementID);\r\n        } else {\r\n          return el;\r\n        }\r\n      });\r\n    });\r\n    setCurrentTest((prev) => {\r\n      if (prev) {\r\n        return filterElements(prev, removedElementID);\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"blood-element\" id={element.id}>\r\n      <div className=\"blood-element__element-name\">\r\n        <span>{element.name}</span>\r\n        <div className=\"tooltip-box\">\r\n          <FaQuestionCircle className=\"tooltip-icon\" />\r\n          <div className=\"tooltip\">{bloodElements[element.id].description}</div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className={`blood-element__result ${\r\n          element.result >= element.referenceFrom &&\r\n          element.result <= element.referenceTo\r\n            ? \"user-pass\"\r\n            : \"user-fail\"\r\n        }`}\r\n      >\r\n        <span>{element.result}</span>\r\n        {element.result >= element.referenceFrom &&\r\n        element.result <= element.referenceTo ? (\r\n          <FaCheck className=\"blood-element__icon\" />\r\n        ) : (\r\n          <FaTimes className=\"blood-element__icon\" />\r\n        )}\r\n      </div>\r\n      <div className=\"blood-element__unit\">\r\n        <span>{bloodElements[element.id].unit}</span>\r\n      </div>\r\n      <div className=\"blood-element__reference\">\r\n        <span>\r\n          {element.referenceFrom} - {element.referenceTo}\r\n        </span>\r\n      </div>\r\n      <div className=\"blood-element__delete-icon\">\r\n        <FaTrash\r\n          className=\"blood-element__icon delete-icon\"\r\n          id={element.id}\r\n          onClick={(e) => handleRemoveBloodElement(e)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FunctionComponent } from \"react\";\r\nimport { Test } from \"../../../types/interfaces\";\r\nimport { BloodElement } from \"./BloodElement\";\r\n\r\ninterface UserAnalysisProps {\r\n  currentTest: Test | null;\r\n  setTests: React.Dispatch<React.SetStateAction<Test[]>>;\r\n  setCurrentTest: React.Dispatch<React.SetStateAction<Test | null>>;\r\n}\r\n\r\nexport const UserAnalysis: FunctionComponent<UserAnalysisProps> = ({\r\n  currentTest,\r\n  setTests,\r\n  setCurrentTest,\r\n}) => {\r\n  return (\r\n    <section className=\"user-analysis\">\r\n      <div className=\"headings\">\r\n        <h2 className=\"heading-secondary\">BADANIE</h2>\r\n        <h2 className=\"heading-secondary\">WYNIK</h2>\r\n        <h2 className=\"heading-secondary\">JEDNOSTKI</h2>\r\n        <h2 className=\"heading-secondary\">WART. REFERENCYJNA</h2>\r\n      </div>\r\n      <div className=\"elements-list\">\r\n        {currentTest?.elements\r\n          ? currentTest.elements.map((element) => (\r\n              <BloodElement\r\n                key={element.id}\r\n                currentTestID={currentTest.id}\r\n                element={element}\r\n                setTests={setTests}\r\n                setCurrentTest={setCurrentTest}\r\n              />\r\n            ))\r\n          : null}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import { FunctionComponent } from \"react\";\r\nimport { Element } from \"../../../types/interfaces\";\r\nimport {\r\n  Page,\r\n  Text,\r\n  Document,\r\n  Image,\r\n  StyleSheet,\r\n  Font,\r\n  View,\r\n} from \"@react-pdf/renderer\";\r\nimport logo from \"../../assets/img/logo1x.png\";\r\n\r\ninterface TestPDFProps {\r\n  elements: Element[];\r\n  date: string | number;\r\n  location: string;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  image: {\r\n    width: \"180px\",\r\n    marginVertical: 15,\r\n    marginHorizontal: 170,\r\n  },\r\n  page: {\r\n    paddingTop: 35,\r\n    paddingBottom: 65,\r\n    paddingHorizontal: 35,\r\n    textAlign: \"center\",\r\n    fontSize: \"12px\",\r\n    fontFamily: \"Roboto\",\r\n  },\r\n  section: {\r\n    margin: 10,\r\n    padding: 10,\r\n    flexGrow: 1,\r\n  },\r\n  text: {\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nFont.register({\r\n  family: \"Roboto\",\r\n  src: \"https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-light-webfont.ttf\",\r\n});\r\n\r\nexport const TestPDF: FunctionComponent<TestPDFProps> = ({\r\n  elements,\r\n  date,\r\n  location,\r\n}) => {\r\n  return (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page}>\r\n        <Image style={styles.image} src={logo} />\r\n        <Text>\r\n          Badanie z dnia {new Date(date).toLocaleDateString(\"en-GB\")} wykonane w{\" \"}\r\n          {location}.\r\n        </Text>\r\n        <View style={styles.section}>\r\n          {elements.map((el) => {\r\n            return (\r\n              <Text key={el.id} style={styles.text}>\r\n                {el.name} - wynik:{\" \"}\r\n                {el.result >= el.referenceFrom &&\r\n                el.result <= el.referenceTo ? (\r\n                  <Text style={{ color: \"#00910e\" }}>{el.result}</Text>\r\n                ) : (\r\n                  <Text style={{ color: \"#d10000\" }}>{el.result}</Text>\r\n                )}{\" \"}\r\n                - wartość referencyjna od {el.referenceFrom} do {el.referenceTo}\r\n              </Text>\r\n            );\r\n          })}\r\n        </View>\r\n      </Page>\r\n    </Document>\r\n  );\r\n};\r\n","import { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\nimport reactDom from \"react-dom\";\r\nimport { AiOutlineLoading } from \"react-icons/ai\";\r\nimport { TestPDF } from \"./TestPDF\";\r\nimport {\r\n  FaTimes,\r\n  FaAlignJustify,\r\n  FaEdit,\r\n  FaDownload,\r\n  FaTrash,\r\n} from \"react-icons/fa\";\r\nimport { Test, TestOptions } from \"../../../types/interfaces\";\r\n\r\ninterface ModalProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  tests: Test[];\r\n  setCurrentTest: React.Dispatch<React.SetStateAction<Test | null>>;\r\n  setTests: React.Dispatch<React.SetStateAction<Test[]>>;\r\n}\r\n\r\nexport const Modal: FunctionComponent<ModalProps> = ({\r\n  open,\r\n  onClose,\r\n  tests,\r\n  setCurrentTest,\r\n  setTests,\r\n}) => {\r\n  const [testOptionsWindow, setTestOptionsWindow] = useState<TestOptions[]>([]);\r\n  useEffect(() => {\r\n    const testOptions = tests.map((test) => ({\r\n      id: test.id,\r\n      isOptionsOpen: false,\r\n    }));\r\n    setTestOptionsWindow(testOptions);\r\n  }, [tests]);\r\n\r\n  const findTestOptionsObj = (id: number) => {\r\n    return testOptionsWindow.find((el: TestOptions) => el.id === id);\r\n  };\r\n\r\n  const handleSetCurrentTest = (id: number) => {\r\n    const result = tests.find((test) => test.id === id);\r\n    if (result) {\r\n      setCurrentTest(result);\r\n    }\r\n  };\r\n\r\n  const handleRemoveTest = (id: number) => {\r\n    setTests((prev) => prev.filter((test) => test.id !== id));\r\n    setCurrentTest((prev) => (prev?.id === id ? null : prev));\r\n  };\r\n\r\n  const findIsOptionsOpen = (id: number) => {\r\n    const result = findTestOptionsObj(id);\r\n    if (result) {\r\n      return result.isOptionsOpen;\r\n    }\r\n  };\r\n\r\n  const toggleIsOptionsOpen = (id: number) => {\r\n    const result = findTestOptionsObj(id);\r\n    if (result) {\r\n      setTestOptionsWindow((prev) => {\r\n        return prev.map((el) => {\r\n          if (el.id === result.id) {\r\n            return { ...el, isOptionsOpen: !el.isOptionsOpen };\r\n          }\r\n          return el;\r\n        });\r\n      });\r\n    }\r\n  };\r\n  if (!open) return null;\r\n  const modalRoot = document.getElementById(\"modal-root\") as HTMLElement;\r\n  return reactDom.createPortal(\r\n    <>\r\n      <div className=\"overlay\"></div>\r\n      <div className=\"modal\">\r\n        <div className=\"modal__close\">\r\n          <FaTimes className=\"close-icon\" onClick={onClose} />\r\n        </div>\r\n        <div className=\"modal__content\">\r\n          <h2 className=\"modal__heading\">Badania</h2>\r\n          <div className=\"user-tests\">\r\n            {tests.length > 0 ? (\r\n              tests.map((test, i) => (\r\n                <div\r\n                  className=\"user-tests__item\"\r\n                  key={test.id}\r\n                  id={test.id.toString()}\r\n                >\r\n                  <div className=\"user-tests__description\">\r\n                    <span className=\"red-label\">{i + 1}. </span>\r\n                    <span>\r\n                      Badanie z dnia{\" \"}\r\n                      {new Date(test.date).toLocaleDateString(\"en-GB\")} w{\" \"}\r\n                      {test.location}\r\n                    </span>\r\n                  </div>\r\n                  <FaAlignJustify\r\n                    className=\"options-icon\"\r\n                    onClick={() => toggleIsOptionsOpen(test.id)}\r\n                    title=\"Pokaż opcje\"\r\n                  />\r\n                  <div\r\n                    className=\"user-tests__options\"\r\n                    style={\r\n                      findIsOptionsOpen(test.id)\r\n                        ? { display: \"flex\" }\r\n                        : { display: \"none\" }\r\n                    }\r\n                  >\r\n                    <div className=\"user-tests__buttons\">\r\n                      <FaEdit\r\n                        className=\"options-icon\"\r\n                        title=\"Otwórz badanie\"\r\n                        onClick={() => handleSetCurrentTest(test.id)}\r\n                      />\r\n                      <PDFDownloadLink\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                          marginRight: \"2.5rem\",\r\n                        }}\r\n                        document={\r\n                          <TestPDF\r\n                            elements={test.elements}\r\n                            date={test.date}\r\n                            location={test.location}\r\n                          />\r\n                        }\r\n                        fileName={`${test.id} - ${test.location} - ${test.date}`}\r\n                      >\r\n                        {({ blob, url, loading, error }) =>\r\n                          loading ? (\r\n                            <AiOutlineLoading className=\"loading-spinner\" />\r\n                          ) : (\r\n                            <FaDownload\r\n                              className=\"options-icon\"\r\n                              title=\"Pobierz badanie\"\r\n                            />\r\n                          )\r\n                        }\r\n                      </PDFDownloadLink>\r\n                      <FaTrash\r\n                        className=\"options-icon\"\r\n                        title=\"Usuń badanie\"\r\n                        onClick={() => handleRemoveTest(test.id)}\r\n                      />\r\n                    </div>\r\n                    <FaAlignJustify\r\n                      className=\"options-icon\"\r\n                      onClick={() => toggleIsOptionsOpen(test.id)}\r\n                      title=\"Pokaż badanie\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"notests-box\">\r\n                <span className=\"red-label\">Brak dodanych badań</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>,\r\n    modalRoot\r\n  );\r\n};\r\n","import \"./scss/main.scss\";\nimport logo from \"./assets/img/logo1x.png\";\nimport { FunctionComponent, useState, useEffect, Fragment } from \"react\";\nimport { UserData } from \"./components/UserData/UserData\";\nimport { UserResults } from \"./components/UserResults/UserResults\";\nimport { UserAnalysis } from \"./components/UserAnalysis/UserAnalysis\";\nimport { Test } from \"../types/interfaces\";\nimport { useModal } from \"./hooks/useModal\";\nimport { Modal } from \"./components/Modal/Modal\";\n\nexport const App: FunctionComponent = () => {\n  const [currentTest, setCurrentTest] = useState<Test | null>(null);\n  const [tests, setTests] = useState<Test[]>([]);\n  const [isOpen, toggleIsOpen] = useModal();\n\n  useEffect(() => {\n    const storedTests = localStorage.getItem(\"tests\");\n    if (storedTests) {\n      setTests(JSON.parse(storedTests));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (tests.length > 0) {\n      localStorage.setItem(\"tests\", JSON.stringify(tests));\n    } else {\n      localStorage.clear();\n    }\n  }, [tests]);\n\n  return (\n    <>\n      <main className=\"main\">\n        <nav className=\"navigation\">\n          <div className=\"logo-container\">\n            <img src={logo} className=\"logo\" alt=\"\" />\n          </div>\n          <ul className=\"navigation__list\">\n            <li className=\"navigation__item\" onClick={toggleIsOpen}>\n              BADANIA\n            </li>\n            <li className=\"navigation__item\">\n              <a\n                href=\"https://github.com/Przemo246/mojakrew\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className=\"navigation__link\"\n              >\n                GITHUB\n              </a>\n            </li>\n            <li className=\"navigation__item\">\n              <a\n                className=\"navigation__link\"\n                href=\"mailto:przemo247@outlook.com\"\n              >\n                EMAIL\n              </a>\n            </li>\n          </ul>\n        </nav>\n        <UserData\n          setTests={setTests}\n          setCurrentTest={setCurrentTest}\n          currentTest={currentTest}\n        />\n        <UserResults\n          setTests={setTests}\n          currentTest={currentTest}\n          setCurrentTest={setCurrentTest}\n        />\n        <UserAnalysis\n          currentTest={currentTest}\n          setTests={setTests}\n          setCurrentTest={setCurrentTest}\n        />\n      </main>\n      <Modal\n        open={isOpen}\n        onClose={toggleIsOpen}\n        tests={tests}\n        setCurrentTest={setCurrentTest}\n        setTests={setTests}\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\r\n\r\nexport const useModal = (): [boolean, () => void] => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggleIsOpen = () => setIsOpen(!isOpen);\r\n  return [isOpen, toggleIsOpen];\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}